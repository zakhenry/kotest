(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{131:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return s}));var n=a(3),b=a(7),l=(a(0),a(149)),r={id:"core",title:"Core Matchers",slug:"core-matchers.html",sidebar_label:"Core"},c={unversionedId:"assertions/core",id:"assertions/core",isDocsHomePage:!1,title:"Core Matchers",description:"Matchers provided by the kotest-assertions-core module.",source:"@site/docs/assertions/core.md",slug:"/assertions/core-matchers.html",permalink:"/docs/assertions/core-matchers.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md",version:"current",sidebar_label:"Core",sidebar:"assertions",previous:{title:"Assertion Mode",permalink:"/docs/assertions/assertion-mode.html"},next:{title:"Json Matchers",permalink:"/docs/assertions/json-matchers.html"}},i=[],d={rightToc:i};function s(e){var t=e.components,a=Object(b.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Matchers provided by the ",Object(l.b)("inlineCode",{parentName:"p"},"kotest-assertions-core")," module."),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"General"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"obj.shouldBe(other)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"General purpose assertion that the given obj and other are both equal")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"expr.shouldBeTrue()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Convenience assertion that the expression is true. Equivalent to ",Object(l.b)("inlineCode",{parentName:"td"},"expr.shouldBe(true)"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"expr.shouldBeFalse()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Convenience assertion that the expression is false. Equivalent to ",Object(l.b)("inlineCode",{parentName:"td"},"expr.shouldBe(false)"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"shouldThrow<T> { block }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"General purpose construct that asserts that the block throws a ",Object(l.b)("inlineCode",{parentName:"td"},"T")," Throwable or a subtype of ",Object(l.b)("inlineCode",{parentName:"td"},"T"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"shouldThrowExactly<T> { block }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"General purpose construct that asserts that the block throws exactly ",Object(l.b)("inlineCode",{parentName:"td"},"T"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"shouldThrowAny { block }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"General purpose construct that asserts that the block throws a Throwable of any type")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Types"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"obj.shouldBeSameInstanceAs(other)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Compares objects by identity, that is, they are the same exact reference.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"obj.shouldBeTypeOf<T>()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the given reference is exactly of type T. Subclass will fail. Ie, ",Object(l.b)("inlineCode",{parentName:"td"},"1 should beOfType<Number>")," would fail because although 1 ",Object(l.b)("em",{parentName:"td"},"is")," a Number, the runtime type is not Number.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"obj.shouldBeInstanceOf<T>")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the given reference is of type T or a subclass of T.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"obj.shouldHaveAnnotation(annotationClass)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the object has an annotation of the given type.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"obj.shouldBeNull()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that a given reference is null.")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Comparables"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"comp.shouldBeLessThan(other)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Uses ",Object(l.b)("inlineCode",{parentName:"td"},"compareTo")," to verify that ",Object(l.b)("inlineCode",{parentName:"td"},"comp")," is less than ",Object(l.b)("inlineCode",{parentName:"td"},"other"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"comp.shouldBeLessThanOrEqualTo(other)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Uses ",Object(l.b)("inlineCode",{parentName:"td"},"compareTo")," to verify that ",Object(l.b)("inlineCode",{parentName:"td"},"comp")," is less than or equal to ",Object(l.b)("inlineCode",{parentName:"td"},"other"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"comp.shouldBeEqualComparingTo(other)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Uses ",Object(l.b)("inlineCode",{parentName:"td"},"compareTo")," to verify that ",Object(l.b)("inlineCode",{parentName:"td"},"comp")," is equal to ",Object(l.b)("inlineCode",{parentName:"td"},"other"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"comp.shouldBeEqualComparingTo(other, comparator)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Uses ",Object(l.b)("inlineCode",{parentName:"td"},"comparator.compare")," to verify that ",Object(l.b)("inlineCode",{parentName:"td"},"comp")," is equal to ",Object(l.b)("inlineCode",{parentName:"td"},"other"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"comp.shouldBeGreaterThan(other)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Uses ",Object(l.b)("inlineCode",{parentName:"td"},"compareTo")," to verify that ",Object(l.b)("inlineCode",{parentName:"td"},"comp")," is greater than ",Object(l.b)("inlineCode",{parentName:"td"},"other"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"comp.shouldBeGreaterThanOrEqualTo(other)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Uses ",Object(l.b)("inlineCode",{parentName:"td"},"compareTo")," to verify that ",Object(l.b)("inlineCode",{parentName:"td"},"comp")," is greater than or equal to ",Object(l.b)("inlineCode",{parentName:"td"},"other"))))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Iterator"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"iterator.shouldBeEmpty()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the iterator does not have a next value.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"iterator.shouldHaveNext()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the iterator has a next value")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Maps"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},'map.shouldContain("key", "value")')),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'Asserts that the map contains the mapping "key" to "value"')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"map.shouldContainAll(other)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the map contains all the pairs from the given map.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"map.shouldContainExactly(other)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the map contains exactly the pairs from given map, and no extra.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"map.shouldContainKey(key)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the map contains a key called ",Object(l.b)("inlineCode",{parentName:"td"},"key")," with any value")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"map.shouldContainKeys(keys)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the map contains mappings for all the given keys.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"map.shouldContainValue(value)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the map contains at least one mapping where the value is ",Object(l.b)("inlineCode",{parentName:"td"},"value"),".")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"map.shouldContainValues(values)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the map contains all the given values.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"map.shouldBeEmpty()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that this map is empty.")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Strings"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldBeBlank()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string contains only whitespace, or is empty.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldBeEmpty()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string has length zero.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldBeLowerCase()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string is all in lower case.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldBeUpperCase()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string is all in upper case.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},'str.shouldContain("substr")')),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string includes the given substring. The substring can be equal to the string. This matcher is case sensitive. To make this case insensitive use shouldContainIgnoringCase().")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldContain(regex)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string includes the given regular expression.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldContainADigit()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string contains at least one digit.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldContainIgnoringCase(substring)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string contains the substring ignoring case.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldContainOnlyDigits()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string contains only digits, or is empty.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldBeInteger([radix])")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string contains an integer and returns it.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldContainOnlyOnce(substring)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string contains the substring exactly once.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},'str.shouldEndWith("suffix")')),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string ends with the given suffix. The suffix can be equal to the string. This matcher is case sensitive. To make this case insensitive call ",Object(l.b)("inlineCode",{parentName:"td"},"toLowerCase()")," on the value before the matcher.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldHaveLength(length)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string has the given length.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldHaveLineCount(count)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string contains the given number of lines. Similar to ",Object(l.b)("inlineCode",{parentName:"td"},'str.split("\\n").length.shouldBe(n)'))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldHaveMaxLength(max)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string is no longer than the given max length.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldHaveMinLength(min)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string is no shorter than the given min length.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldHaveSameLengthAs(length)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string has the same length as another string.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldMatch(regex)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string fully matches the given regex.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},'str.shouldStartWith("prefix")')),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string starts with the given prefix. The prefix can be equal to the string. This matcher is case sensitive. To make this case insensitive call ",Object(l.b)("inlineCode",{parentName:"td"},"toLowerCase()")," on the value before the matcher.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"str.shouldBeEqualIgnoringCase(other)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the string is equal to another string ignoring case.")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Integers"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"int.shouldBeBetween(x, y)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the integer is between x and y, inclusive on both x and y")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"int.shouldBeLessThan(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the integer is less than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"int.shouldBeLessThanOrEqual(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the integer is less or equal to than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"int.shouldBeGreaterThan(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the integer is greater than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"int.shouldBeGreaterThanOrEqual(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the integer is greater than or equal to the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"int.shouldBeEven()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the integer is even.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"int.shouldBeOdd()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the integer is odd.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"int.shouldBeInRange(range)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the integer is included in the given range.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"int.shouldBeZero()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the integer is zero")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Longs"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"long.shouldBeBetween(x, y)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the long is between x and y, inclusive on both x and y")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"long.shouldBeLessThan(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the long is less than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"long.shouldBeLessThanOrEqual(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the long is less or equal to than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"long.shouldBeGreaterThan(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the long is greater than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"long.shouldBeGreaterThanOrEqual(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the long is greater than or equal to the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"long.shouldBeInRange(range)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the long is included in the given range.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"long.shouldBeEven()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the long is even.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"long.shouldBeOdd()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the long is odd.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"long.shouldBeZero()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the long is zero")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Doubles or Floats"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"double.shouldBe(value plusOrMinus(tolerance))")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the double is equal to the given value within a tolerance range. This is the recommended way of testing for double equality.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"double.shouldBeBetween(x, y)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the double is between x and y, inclusive on both x and y")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"double.shouldBeLessThan(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the double is less than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"double.shouldBeLessThanOrEqual(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the double is less or equal to than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"double.shouldBeGreaterThan(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the double is greater than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"double.shouldBeGreaterThanOrEqual(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the double is greater than or equal to the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"double.shouldBePositive()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the double is positive")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"double.shouldBeNegative()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the double is negative")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"double.shouldBePositiveInfinity()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the double is positive infinity")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"double.shouldBeNegativeInfinity()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the double is negative infinity")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"double.shouldBeNaN()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the double is the Not-a-Number constant NaN")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"double.shouldBeZero()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the double is zero")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"BigDecimal"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"bigDecimal.shouldHavePrecision(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the bigDecimal precision is equals than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"bigDecimal.shouldHaveScale(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the bigDecimal scale is equals than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"bigDecimal.shouldBePositive()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the bigDecimal is positive")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeNegative()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the bigDecimal is negative")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeZero()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the bigDecimal is zero")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeLessThan(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the bigDecimal is less than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeLessThanOrEquals(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the bigDecimal is less than or equ")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeGreaterThan(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the bigDecimal is greater than the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeGreaterThanOrEquals(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the bigDecimal is greater than or equals to the given value n")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"bigDecimal.shouldBeInRange(r)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the bigDecimal is in the given range")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Channels"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"channel.shouldReceiveWithin(duration)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the channel should receive within duration")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"channel.shouldReceiveNoElementsWithin(duration)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the channel should not receive any elements within duration")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"channel.shouldHaveSize(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the channel should receive exactly n elements before closing")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"channel.shouldReceiveAtLeast(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the channel should receive >= n elements")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"channel.shouldReceiveAtMost(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the channel should receive <=n elements before closing")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"channel.shouldBeClosed()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the channel is closed")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"channel.shouldBeOpen()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the channel is open")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"channel.shouldBeEmpty()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the channel is empty")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Collections"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldBeEmpty()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collections has zero elements.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldBeUnique()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that all the elements of the collection are distinct.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldContain(element)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection contains the given element.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldContainAll(e1, e2, ..., en)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection contains all the elements listed, where order is not important. Ie, element 2 can be in the collection before element 1.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldContainDuplicates()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection contains at least one duplicate element.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldContainExactly()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Assert that a collection contains exactly the given values and nothing else, in order.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldContainExactlyInAnyOrder()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Assert that a collection contains exactly the given values and nothing else, in ",Object(l.b)("em",{parentName:"td"},"any")," order.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldContainAllInAnyOrder()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Assert that a collection contains all the given values and nothing else, in ",Object(l.b)("em",{parentName:"td"},"any")," order.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldContainNoNulls()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection contains no null elements, or is empty.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldContainNull()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection contains at least one null element.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldContainOnlyNulls()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection contains only null elements, or is empty.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveSingleElement(element)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection only contains a single element and that that element is the given one.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveSingleElement { block }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection contains a single element by a given predicate.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveSize(length)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection is exactly the given length.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldBeSingleton()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection contains only one element.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldBeSingleton { block }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection only one element, and then, runs the block with this element.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveLowerBound(element)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the given element is smaller or equal to every element of the collection. Works only for elements that implement Comparable.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveUpperBound(element)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the given element is larger or equal to every element of the collection. Works only for elements that implement Comparable.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldBeSmallerThan(col)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection is smaller than the other collection.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldBeLargerThan(col)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection is larger than the other collection.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldBeSameSizeAs(col)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection has the same size as the other collection.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveAtLeastSize(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection has at least size n.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveAtMostSize(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection has at most size n.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"list.shouldBeSorted()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the list is sorted.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"list.shouldContainInOrder(other)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that this list contains the given list in order. Other elements may appear either side of the given list.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"list.shouldExistInOrder({ element }, ...)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that this list contains elements matching the predicates in order. Other elements may appear around or between the elements matching the predicates.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"list.shouldHaveElementAt(index, element)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that this list contains the given element at the given position.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"list.shouldStartWith(lst)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that this list starts with the elements of the given list, in order.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"list.shouldEndWith(lst)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that this list ends with the elements of the given list, in order.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"value.shouldBeOneOf(collection)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that a specific instance is contained in a collection.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldContainAnyOf(collection)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the collection has at least one of the elements in ",Object(l.b)("inlineCode",{parentName:"td"},"collection"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"value.shouldBeIn(collection)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that an object is contained in collection, checking by value and not by reference.")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"URIs"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"uri.shouldHaveAuthority(fragment)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the uri has the given authority.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"uri.shouldHaveFragment(fragment)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the uri has the given fragment.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"uri.shouldHaveHost(scheme)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the uri has the given hostname.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"uri.shouldHaveParameter(scheme)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the uri's query string contains the given parameter.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"uri.shouldHavePath(scheme)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the uri has the given path.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"uri.shouldHavePort(scheme)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the uri has the given port.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"uri.shouldHaveQuery(fragment)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the uri has the given query.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"uri.shouldHaveScheme(scheme)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the uri has the given scheme.")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Files"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeAbsolute()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file represents an absolute path.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeADirectory()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file denotes a directory.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeAFile()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file denotes a file.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeCanonical()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file is in canonical format.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeEmpty()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file exists but is empty.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeExecutable()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file is executable by the current process.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeHidden()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file exists on disk and is a hidden file.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeReadable()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file is readable by the current process.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeRelative()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file represents a relative path.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeSmaller(file)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that this file is smaller than the given file.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeLarger(file)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that this file is larger than the given file.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeWriteable()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file is writeable by the current process.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"dir.shouldBeNonEmptyDirectory()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file is a directory and is non empty.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"dir.shouldContainFile(name)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file is a directory and that it contains a file with the given name.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"dir.shouldContainNFiles(name)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file is a directory and that it contains exactly n files.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldExist()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file exists on disk, either a directory or as a file.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldHaveExtension(ext)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file ends with the given extension.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldHaveFileSize(size)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file has the given file size.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldHaveName(name)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file's name matches the given name.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldHavePath(path)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file's path matches the given path.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldStartWithPath(prefix)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file's path starts with the given prefix.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"dir.shouldContainFileDeep(name)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Assert that file is a directory and that it or any sub directory contains a file with the given name.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"dir.shouldContainFiles(name1, name2, ..., nameN)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file is a directory and that it contains al files with the given name.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldBeSymbolicLink()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the file is a symbolic link.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"file.shouldHaveParent(name)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Assert that the file has a parent with the given name")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Dates"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldHaveSameYearAs(otherDate)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date has the same year as the given date.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldHaveSameMonthAs(otherDate)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date has the same month as the given date.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldHaveSameDayAs(otherDate)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date has the same day of the month as the given date.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldBeBefore(otherDate)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date is before the given date.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldBeAfter(otherDate)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date is after the given date.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldBeWithin(period, otherDate)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date is within the period of the given date.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldBeWithin(duration, otherDate)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date is within the duration of the given date.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldBeBetween(firstDate, secondDate)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date is between firstdate and seconddate.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldHaveYear(year)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date have correct year.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldHaveMonth(month)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date have correct month.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldHaveDayOfYear(day)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date have correct day of year.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldHaveDayOfMonth(day)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date have correct day of month.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldHaveDayOfWeek(day)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date have correct day of week.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldHaveHour(hour)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date have correct hour.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldHaveMinute(Minute)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date have correct minute.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldHaveSecond(second)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date have correct second.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"date.shouldHaveNano(nao)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the date have correct nano second.")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"ZonedDateTime"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"zonedDateTime.shouldBeToday()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the ZonedDateTime has the same day as the today.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"zonedDateTime.shouldHaveSameInstantAs(other: ZonedDateTime)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the ZonedDateTime is equal to other ZonedDateTime using ",Object(l.b)("inlineCode",{parentName:"td"},"ChronoZonedDateTime.isEqual"),".")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Times"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"time.shouldHaveSameHoursAs(otherTime)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the time has the same hours as the given time.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"time.shouldHaveSameMinutesAs(otherTime)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the time has the same minutes as the given time.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"time.shouldHaveSameSecondsAs(otherTime)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the time has the same seconds as the given time.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"time.shouldHaveSameNanosAs(otherTime)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the time has the same nanos as the given time.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"time.shouldBeBefore(otherTime)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the time is before the given time.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"time.shouldBeAfter(otherTime)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the time is after the given time.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"time.shouldBeBetween(firstTime, secondTime)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the time is between firstTime and secondTime.")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Instant"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"instant.shouldBeAfter(anotherInstant)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the instant is after anotherInstant")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"instant.shouldBeBefore(anotherInstant)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the instant is before anotherInstant")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"instant.shouldBeBetween(fromInstant, toInstant)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the instant is between fromInstant and toInstant")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Timestamp"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"timestamp.shouldBeAfter(anotherTimestamp)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the timestamp is after anotherTimestamp")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"timestamp.shouldBeBefore(anotherTimestamp)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the timestamp is before anotherTimestamp")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"timestamp.shouldBeBetween(fromTimestamp, toTimestamp)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the timestamp is between fromTimestamp and toTimestamp")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Concurrent"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"shouldCompleteWithin(timeout, unit, function)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the given function completes within the given duration.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"shouldTimeout(timeout, unit, function)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that given function does not complete within the given duration.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"shouldTimeout(duration, suspendableFunction)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that given suspendable function does not complete within the given duration.")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Futures"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"future.shouldBeCancelled()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the future has been cancelled.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"future.shouldBeCompleted()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the future has completed.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"future.shouldBeCompletedExceptionally()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the the future has completed with an exception.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"future.shouldCompleteExceptionallyWith(throwable)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the the future will complete with given exception.")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Threads"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"thread.shouldBeBlocked()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the thread is currently blocked.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"thread.shouldBeDaemon()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the thread is a daemon thread.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"thread.shouldBeAlive()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the thread is alive.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"thread.shouldBeTerminated()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the thread has been terminated.")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Throwables / Exceptions"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"throwable.shouldHaveMessage(message)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the throwable message is the same of the given one.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"throwable.shouldHaveCause()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the throwable have a cause.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"throwable.shouldHaveCause { block }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the throwable have a cause, and pass it as parameter to the block")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"throwable.shouldHaveCauseInstanceOf<T>()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the throwable have a cause and it is of type T or a subclass of T.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"throwable.shouldHaveCauseOfType<T>()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the throwable have a cause and it is ",Object(l.b)("strong",{parentName:"td"},"exactly")," of type T.")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Result"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"result.shouldBeSuccess()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the result is success")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"result.shouldBeSuccess(value)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the result is a success and the value is the same of the given one.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"result.shouldBeSuccess(block)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the result is success and then, runs the block with the result value.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"result.shouldBeFailure()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the result is failure")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"result.shouldBeFailureOfType<Type : Throwable>()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the result is a failure and the exception class is equals the same of the given one.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"result.shouldBeFailure(block)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the result is failure and then, runs the block with the exception.")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Optional"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"optional.shouldBePresent()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that this Optional is present")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"optional.shouldBePresent { value -> .. }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that this Optional is present , then execute block with the value")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"optional.shouldBeEmpty()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that this optional is empty")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Reflection"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldHaveAnnotations()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class has some annotation")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldHaveAnnotations(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class has exactly N annotation")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldBeAnnotatedWith<T>()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class is annotated with the given type")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldBeAnnotatedWith<T> { block }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class is annotated with the given type, and then, runs the block with the annotation")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldHaveFunction(name)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class have a function with the given name")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldHaveFunction(name) { block }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class have a function with the given name, and then, runs the block with the function")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldHaveMemberProperty(name)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class have a member property with the given name")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldHaveMemberProperty(name) { block }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class have a member property with the given name, and then, runs the block with the function")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldBeSubtypeOf<T>()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class is a subtype of T")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldBeSupertypeOf<T>()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class is a supertype of T")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldBeData()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class is a data class")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldBeSealed()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class is a sealed class")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldBeCompanion()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class is a companion object")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldHavePrimaryConstructor()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class has a primary constructor")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kclass.shouldHaveVisibility(visibility)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the class has the given visibility")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kfunction.shouldHaveAnnotations()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the function has some annotation")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kfunction.shouldHaveAnnotations(n)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the function has exactly N annotation")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kfunction.shouldBeAnnotatedWith<T>()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the function is annotated with the given type")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kfunction.shouldBeAnnotatedWith<T> { block }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the function is annotated with the given type, and then, runs the block with the annotation")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kfunction.shouldHaveReturnType<T>()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the function returns the given type")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kfunction.shouldBeInline()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the function is inline")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kfunction.shouldBeInfix()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the function is infix")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kproperty.shouldBeOfType<T>()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the property is of the given type")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kproperty.shouldBeConst()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the property is a const")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kproperty.shouldBeLateInit()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the property is a late init var")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kcallable.shouldHaveVisibility(visibility)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the member have the given visibility")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kcallable.shouldBeFinal()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the member is final")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kcallable.shouldBeOpen()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the member is open")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kcallable.shouldBeAbstract()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the member is abstract")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kcallable.shouldBeSuspendable()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the member is suspendable")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kcallable.shouldAcceptParameters(parameters)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the member can be called with the parameters (check the types)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kcallable.shouldAcceptParameters(parameters) { block }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the member can be called with the parameters (check the types), and then, runs the block with the annotation")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kcallable.shouldHaveParametersWithName(parameters)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the member has the parameters with the given name")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"kcallable.shouldHaveParametersWithName(parameters) { block }")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the member has the parameters with the given name, and then, runs the block with the annotation")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"ktype.shouldBeOfType<T>()")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the KType has the type T")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Statistic"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveMean(mean)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that collection has specific mean with default precision = 4")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveMean(mean, precision)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that collection has specific mean with specific precision")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveVariance(mean)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that collection has specific variance with default precision = 4")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveVariance(mean, precision)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that collection has specific variance with specific precision")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveStandardDeviation(mean)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that collection has specific standard deviation with default precision = 4")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"collection.shouldHaveStandardDeviation(mean, precision)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that collection has specific standard deviation with specific precision")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Regex"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"regex.shouldBeRegex(anotherRegex)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that regex is equal to anotherRegex by comparing their pattern and regexOptions")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"regex.shouldHavePattern(regexPattern)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that regex have given regexPattern")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"regex.shouldHaveExactRegexOptions(regexOptions)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that regex have exactly the given regexOptions")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"regex.shouldIncludeRegexOption(regexOption)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that regex include the given regexOption")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"regex.shouldIncludeRegexOptions(regexOptions)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that regex include of the given regexOptions")))),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Selective Matchers"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"any.shouldBeEqualToUsingFields(other: T, vararg properties: KProperty<*>)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the any is equal to other considering only given properties. See ",Object(l.b)("a",Object(n.a)({parentName:"td"},{href:"https://github.com/kotest/kotest/blob/1f4069d78faead65a0d7e8c7f1b689b417a655d2/kotest-assertions/kotest-assertions-core/src/jvmMain/kotlin/io/kotest/matchers/equality/reflection.kt#L20"}),"Example"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"any.shouldBeEqualToIgnoringFields(other: T, vararg properties: KProperty<*>)")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Asserts that the any is equal to other ignoring the given properties. See ",Object(l.b)("a",Object(n.a)({parentName:"td"},{href:"https://github.com/kotest/kotest/blob/1f4069d78faead65a0d7e8c7f1b689b417a655d2/kotest-assertions/kotest-assertions-core/src/jvmMain/kotlin/io/kotest/matchers/equality/reflection.kt#L127"}),"Example"))))))}s.isMDXComponent=!0},149:function(e,t,a){"use strict";a.d(t,"a",(function(){return o})),a.d(t,"b",(function(){return m}));var n=a(0),b=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,b=function(e,t){if(null==e)return{};var a,n,b={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(b[a]=e[a]);return b}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(b[a]=e[a])}return b}var d=b.a.createContext({}),s=function(e){var t=b.a.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},o=function(e){var t=s(e.components);return b.a.createElement(d.Provider,{value:t},e.children)},O={inlineCode:"code",wrapper:function(e){var t=e.children;return b.a.createElement(b.a.Fragment,{},t)}},j=b.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,r=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),o=s(a),j=n,m=o["".concat(r,".").concat(j)]||o[j]||O[j]||l;return a?b.a.createElement(m,c(c({ref:t},d),{},{components:a})):b.a.createElement(m,c({ref:t},d))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=j;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,r[1]=c;for(var d=2;d<l;d++)r[d]=a[d];return b.a.createElement.apply(null,r)}return b.a.createElement.apply(null,a)}j.displayName="MDXCreateElement"}}]);
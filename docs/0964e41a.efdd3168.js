(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{149:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,d=u["".concat(i,".").concat(m)]||u[m]||b[m]||o;return n?a.a.createElement(d,s(s({ref:t},l),{},{components:n})):a.a.createElement(d,s({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},62:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),o=(n(0),n(149)),i={id:"customgens",title:"Custom Generators",slug:"custom-generators.html"},s={unversionedId:"proptest/customgens",id:"proptest/customgens",isDocsHomePage:!1,title:"Custom Generators",description:"To write your own generator for a type T, you just create an instance of Arb or Exhaustive.",source:"@site/docs/proptest/customgens.md",slug:"/proptest/custom-generators.html",permalink:"/docs/proptest/custom-generators.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/customgens.md",version:"current",sidebar:"proptest",previous:{title:"Configuration",permalink:"/docs/proptest/property-test-config.html"},next:{title:"Global Configuration",permalink:"/docs/proptest/property-test-global-config.html"}},c=[{value:"Arbitrary",id:"arbitrary",children:[]},{value:"Exhaustive",id:"exhaustive",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"To write your own generator for a type T, you just create an instance of ",Object(o.b)("inlineCode",{parentName:"p"},"Arb<T>")," or ",Object(o.b)("inlineCode",{parentName:"p"},"Exhaustive<T>"),"."),Object(o.b)("h3",{id:"arbitrary"},"Arbitrary"),Object(o.b)("p",null,"When writing a custom arbitrary we can use the ",Object(o.b)("inlineCode",{parentName:"p"},"arbitrary")," builder which accepts a lambda that must return the type we are generating for.\nThe parameter to this lambda is a ",Object(o.b)("inlineCode",{parentName:"p"},"RandomSource")," parameter which contains the seed and the ",Object(o.b)("inlineCode",{parentName:"p"},"Random")," instance. We should typically\nuse the provided ",Object(o.b)("inlineCode",{parentName:"p"},"RandomSource")," if we need access to a ",Object(o.b)("inlineCode",{parentName:"p"},"kotlin.Random")," instance, as this instance will have been seeded by the framework to allow for repeatable tests."),Object(o.b)("p",null,"For example, here is a custom arb that generates a random int between 3 and 6 using the ",Object(o.b)("inlineCode",{parentName:"p"},"arbitrary")," builder."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),"val sillyArb = arbitrary { rs: RandomSource ->\n   rs.random.nextInt(3..6)\n}\n\n")),Object(o.b)("p",null,"We can also use this random if we are composing other arbs when building ours."),Object(o.b)("p",null,"For example, here is an ",Object(o.b)("inlineCode",{parentName:"p"},"Arbitrary")," that supports a custom class called ",Object(o.b)("inlineCode",{parentName:"p"},"Person"),", delegating to a String arbitrary and an Int arbitrary."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),"data class Person(val name: String, val age: Int)\n\nval personArb = arbitrary { rs ->\n   val name = Arb.string(10..12).next(rs)\n   val age = Arb.int(21, 150).next(rs)\n   Person(name, age)\n}\n")),Object(o.b)("p",null,"Although in the real world this type of arb would use ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/proptest/generator-operations.html#bind"}),"bind"),", it demonstrates the principle of composing."),Object(o.b)("h3",{id:"exhaustive"},"Exhaustive"),Object(o.b)("p",null,"When writing a custom exhaustive we can use the ",Object(o.b)("inlineCode",{parentName:"p"},"exhaustive()")," extension function on a List. Nothing more to it than that really!"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),"val singleDigitPrimes = listOf(2,3,5,7).exhaustive()\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),'class PropertyExample: StringSpec({\n    "testing single digit primes" {\n        checkAll(singleDigitPrimes) { prime ->\n           isPrime(prime) shouldBe true\n           isPrime(prime * prime) shouldBe false\n        }\n    }\n})\n')))}p.isMDXComponent=!0}}]);
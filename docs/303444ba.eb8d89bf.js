(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{149:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return d}));var n=r(0),o=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=o.a.createContext({}),c=function(e){var t=o.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},f=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=c(r),f=n,d=u["".concat(p,".").concat(f)]||u[f]||b[f]||i;return r?o.a.createElement(d,l(l({ref:t},s),{},{components:r})):o.a.createElement(d,l({ref:t},s))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,p=new Array(i);p[0]=f;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:n,p[1]=l;for(var s=2;s<i;s++)p[s]=r[s];return o.a.createElement.apply(null,p)}return o.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},83:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return p})),r.d(t,"metadata",(function(){return l})),r.d(t,"rightToc",(function(){return a})),r.d(t,"default",(function(){return c}));var n=r(3),o=r(7),i=(r(0),r(149)),p={id:"props",title:"Properties",slug:"intellij-properties.html"},l={unversionedId:"intellij/props",id:"intellij/props",isDocsHomePage:!1,title:"Properties",description:"When running tests via the intellij runner, properties set using gradle.properties or in a gradle build file won't be picked up of course.",source:"@site/docs/intellij/props.md",slug:"/intellij/intellij-properties.html",permalink:"/docs/intellij/intellij-properties.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/intellij/props.md",version:"current",sidebar:"intellij",previous:{title:"Test Explorer",permalink:"/docs/intellij/intellij-test-explorer.html"}},a=[{value:"Specifying the properties filename",id:"specifying-the-properties-filename",children:[]}],s={rightToc:a};function c(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"When running tests via the intellij runner, properties set using ",Object(i.b)("inlineCode",{parentName:"p"},"gradle.properties")," or in a gradle build file won't be picked up of course."),Object(i.b)("p",null,"To support runtime System properties, the Kotest framework will always look for key value pairs inside a ",Object(i.b)("inlineCode",{parentName:"p"},"kotest.properties")," file located on the classpath.\nAny key value pairs located in this file will be set as a system property before any tests execute."),Object(i.b)("p",null,"For example, after adding this file to your classpath as ",Object(i.b)("inlineCode",{parentName:"p"},"kotest.properties"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"foo=bar\n")),Object(i.b)("p",null,"The following test would pass:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-kotlin"}),'class FooTest : DescribeSpec() {\n  init {\n    describe("after adding kotest.properties") {\n      it("foo should be set") {\n         System.getProperty("foo") shouldBe "bar"\n      }\n    }\n  }\n}\n')),Object(i.b)("h3",{id:"specifying-the-properties-filename"},"Specifying the properties filename"),Object(i.b)("p",null,"If you don't wish to name the file ",Object(i.b)("inlineCode",{parentName:"p"},"kotest.properties"),", or perhaps you want to support different files based on an environment,\nthen you can use the system property ",Object(i.b)("inlineCode",{parentName:"p"},"kotest.properties.filename")," to set the properties filename."),Object(i.b)("p",null,"For example, you could launch tests with ",Object(i.b)("inlineCode",{parentName:"p"},"kotest.properties.filename=cluster.prd.properties")," then the key value file named\n",Object(i.b)("inlineCode",{parentName:"p"},"cluster.prd.properties")," would be loaded before any tests are executed."))}c.isMDXComponent=!0}}]);